let resize=[];function ClearElement(e){if(e.lastChild)for(;e.hasChildNodes();)e.removeChild(e.lastChild)}function Route(e,t){e&&t(e)}function CreateElement(e){let t=document.createElement(e.tag);if("class"in e&&t.classList.add(e.class),"attribute"in e)for(let n in e.attribute)t.setAttribute(n,e.attribute[n]);return"content"in e&&(t.innerText=e.content),t}function HTMLRender(e,t){let n=function(t){let n=CreateElement(t);return function e(t,n){let l=null;for(let r of n.el){if(l=CreateElement(r),t.appendChild(l),"event"in r)for(let e in r.event)l.addEventListener(e,r.event[e]);r.el&&r.el[0]&&e(l,r)}}(n,t),e.appendChild(n),n},l=null;if(Array.isArray(t))for(let e of t)l.push(n(e.el));else l=n(t.el);return l}function getCSSProperty(e,t){let n=0;return n=+(n=e.style[t]?e.style[t]:getComputedStyle(e)[t]).replace(/[^\d]/g,""),isNaN(n)?0:n}function LoadFile(e,t,n=!1){if(!n)return HTMLRender(document.body,{el:{tag:t,attribute:e,el:[]}})}function WindowResize(e){for(let e of resize)e.fun()}Route(Array.from(document.getElementsByClassName("carousel")),e=>{function t(e){let t=e.getElementsByClassName("carousel-body")[0],n=0,l="active";function r(){let r=function(r){return{tag:"li",attribute:{class:"carousel-nav-circle"+r},content:"",event:{click:function(r){!function(r,i){i=i!=window?i:null;let a=0,s=e.querySelectorAll(".carouse-nav > ul > li");for(let e of s){if(i==e)break;a++}let o=0;for(let e of t.children)o<a?e.classList.add("hidden"):n-1>o||n-1+a>=o?e.classList.remove("hidden"):e.classList.add("hidden"),o++;let c=e.querySelector(".carouse-nav > ul > li.active");c&&c.classList.remove(l),s[a].classList.add(l)}(0,this)}}}},i={el:{tag:"ul",el:[]}};for(let e=0,a=t.children.length-(n-1);e<a;e++)i.el.el.push(r(0==e?" "+l:""));HTMLRender(e.getElementsByClassName("carouse-nav")[0],i)}function i(){let e=t.clientWidth,l=getCSSProperty(t.children[0],"marginRight")+t.children[0].clientWidth;for(let r=n=~~(e/l),i=t.children.length;r<i;r++)t.children[r].classList.add("hidden")}i(),r(),resize.push({fun:function(){!function(){e.getElementsByClassName("carouse-nav")[0]&&ClearElement(e.getElementsByClassName("carouse-nav")[0]);for(let e=0,n=t.children.length;e<n;e++)t.children[e].classList.remove("hidden");i(),r()}()}})}for(let n of e)t(n)}),Route(document.getElementById("map"),e=>{function t(){let e=function(e){return L.tileLayer("https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw",{id:e,attribution:'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors,<a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery Â© <a href="https://www.mapbox.com/">Mapbox</a>'})};return{openstreetmap:L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",{attribution:'&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'}),"mapbox.streets":e("mapbox.streets"),"mapbox.light":e("mapbox.light")}}function n(e){let n=new t,l=L.map("map",{center:e,zoom:10,layers:n["mapbox.streets"]});!function(e){let t=[{latLng:[50.5251027,30.3488003],text:"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa."}];for(marker of t)L.marker(marker.latLng).addTo(e).bindPopup(marker.text)}(l),L.control.layers(n).addTo(l)}function l(){n([50.5251027,30.3488003])}let r=LoadFile({src:"https://unpkg.com/leaflet@1.5.1/dist/leaflet.js",integrity:"sha512-GffPMF3RvMeYyc1LWMHtK8EbPv0iNZ8/oTtHPx9/cc2ILxQ+u905qIwdpULaqDkyBKgOaB57QTMg7ztg8Jm2Og==",crossorigin:"",async:!1},"script"),i=LoadFile({rel:"stylesheet",href:"https://unpkg.com/leaflet@1.5.1/dist/leaflet.css",integrity:"sha512-xwE/Az9zrjBIphAcBb3F6JVqxf46+CDLwfLMHloNu6KEQCAWi6HcDUbeOfBIptF7tcCzusKFjFw2yuvEpDL9wQ==",crossorigin:""},"link");r.addEventListener("load",l),r.addEventListener("onerror ",function(){(r=LoadFile({src:"./assets/lib/leafletjs-1.5.1/leafletjs.js"},"script")).addEventListener("load",l)}),i.addEventListener("onerror ",function(){LoadFile({rel:"stylesheet",href:"./assets/lib/leafletjs-1.5.1/leafletjs.css"},"link")})}),window.addEventListener("resize",WindowResize);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsicmVzaXplIiwiQ2xlYXJFbGVtZW50IiwiZWwiLCJsYXN0Q2hpbGQiLCJoYXNDaGlsZE5vZGVzIiwicmVtb3ZlQ2hpbGQiLCJSb3V0ZSIsImNvbGxiYWNrIiwiQ3JlYXRlRWxlbWVudCIsImRhdGEiLCJ0YWciLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc0xpc3QiLCJhZGQiLCJjbGFzcyIsImF0dCIsImF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsImlubmVyVGV4dCIsImNvbnRlbnQiLCJIVE1MUmVuZGVyIiwiZWxlbWVudCIsImNyZWF0Iiwib2JqIiwicGFyZW50IiwicmVuZGVyIiwiaXRlbSIsImQiLCJhcHBlbmRDaGlsZCIsImV2ZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsIkFycmF5IiwiaXNBcnJheSIsInB1c2giLCJnZXRDU1NQcm9wZXJ0eSIsInByb3BlcnR5IiwicmVzIiwic3R5bGUiLCJnZXRDb21wdXRlZFN0eWxlIiwicmVwbGFjZSIsImlzTmFOIiwiTG9hZEZpbGUiLCJzdGF0dXMiLCJib2R5IiwiV2luZG93UmVzaXplIiwiZXYiLCJmdW4iLCJmcm9tIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsIml0ZW1zIiwiQ2Fyb3VzZWwiLCJjYXJvdXNlbCIsImNhcm91c2VsQm9keSIsIm1heFBvc3RJZCIsImNsYXNzTmFtZU5hdkl0ZW0iLCJDcmVhdGVDYXJvdXNlbE5hdmlnYXRpb24iLCJwdXNoT2JqSXRlbSIsImNsYXNzTmFtZSIsImNsaWNrIiwid2luZG93IiwiaWQiLCJxdWVyeVNlbGVjdG9yQWxsIiwibiIsImNoaWxkcmVuIiwicmVtb3ZlIiwicmVtb3ZlQ2xhc3MiLCJxdWVyeVNlbGVjdG9yIiwiQ2xpY2xlZEl0ZW0iLCJ0aGlzIiwiY291bnRJdGVtIiwibGVuZ3RoIiwiQ2Fyb3VzZWxTY3JvbGwiLCJwYXJlbnRXaWR0aCIsImNsaWVudFdpZHRoIiwiaXRlbVdpZHRoIiwiTWVkaWEiLCJnZXRFbGVtZW50QnlJZCIsIm1hcCIsIk1hcExheWVycyIsIm1hcGJveCIsIkwiLCJ0aWxlTGF5ZXIiLCJhdHRyaWJ1dGlvbiIsIm9wZW5zdHJlZXRtYXAiLCJtYXBib3guc3RyZWV0cyIsIm1hcGJveC5saWdodCIsIkxlYWZsZXQiLCJsYXRsbmciLCJtYXBMYXllcnMiLCJjZW50ZXIiLCJ6b29tIiwibGF5ZXJzIiwibWFya2VycyIsImxhdExuZyIsInRleHQiLCJtYXJrZXIiLCJhZGRUbyIsImJpbmRQb3B1cCIsIkFkZE1hcmtlciIsImNvbnRyb2wiLCJDb250YWN0cyIsImxlYWZsZXRqcyIsInNyYyIsImludGVncml0eSIsImNyb3Nzb3JpZ2luIiwiYXN5bmMiLCJsZWFmbGV0Y3NzIiwicmVsIiwiaHJlZiJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsT0FBUyxHQUViLFNBQVNDLGFBQWFDLEdBQ3JCLEdBQUlBLEVBQUdDLFVBQ04sS0FBT0QsRUFBR0UsaUJBQ1RGLEVBQUdHLFlBQVlILEVBQUdDLFdBSXJCLFNBQVNHLE1BQU1KLEVBQUlLLEdBQ1pMLEdBQ0NLLEVBQVNMLEdBR2pCLFNBQVNNLGNBQWNDLEdBQ25CLElBQUlDLEVBQU1DLFNBQVNDLGNBQWNILEVBQUtDLEtBSXRDLEdBSEksVUFBV0QsR0FDWEMsRUFBSUcsVUFBVUMsSUFBSUwsRUFBS00sT0FFdkIsY0FBZU4sRUFDZixJQUFLLElBQUlPLEtBQU9QLEVBQUtRLFVBQ2pCUCxFQUFJUSxhQUFhRixFQUFLUCxFQUFLUSxVQUFVRCxJQU03QyxNQUhJLFlBQWFQLElBQ2JDLEVBQUlTLFVBQVlWLEVBQUtXLFNBRWxCVixFQUdYLFNBQVNXLFdBQVdDLEVBQVNiLEdBa0J6QixJQUFJYyxFQUFRLFNBQVNDLEdBQ2pCLElBQUlDLEVBQVNqQixjQUFjZ0IsR0FHM0IsT0FyQkosU0FBU0UsRUFBT3hCLEVBQUlPLEdBQ2hCLElBQUlrQixFQUFPLEtBQ1gsSUFBSyxJQUFJQyxLQUFLbkIsRUFBS1AsR0FBSSxDQUluQixHQUhBeUIsRUFBT25CLGNBQWNvQixH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LGtEQUNSQyxVQUFjLGtHQUNkQyxZQUFnQixHQUNoQkMsT0FBUyxHQUViLFVBR0FDLEVBQWFqRSxTQUFTLENBQ3RCa0UsSUFBUSxhQUNSQyxLQUFTLG1EQUNUTCxVQUFjLGtHQUNkQyxZQUFnQixJQUVoQixRQUdKSCxFQUFVdkUsaUJBQWlCLE9BQVFzRSxHQUVuQ0MsRUFBVXZFLGlCQUFpQixXQUFZLFlBQ25DdUUsRUFBWTVELFNBQVMsQ0FDYjZELElBQVEsNkNBRVosV0FFTXhFLGlCQUFpQixPQUFRc0UsS0FHdkNNLEVBQVc1RSxpQkFBaUIsV0FBWSxXQUNwQ1csU0FBUyxDQUNEa0UsSUFBUSxhQUNSQyxLQUFTLDhDQUViLFlBWWhCakQsT0FBTzdCLGlCQUFpQixTQUFVYyIsInNvdXJjZXNDb250ZW50IjpbImxldCByZXNpemUgPSBbXTtcclxuXHJcbmZ1bmN0aW9uIENsZWFyRWxlbWVudChlbCl7XHJcblx0aWYgKGVsLmxhc3RDaGlsZCl7XHJcblx0XHR3aGlsZSAoZWwuaGFzQ2hpbGROb2RlcygpKXtcclxuXHRcdFx0ZWwucmVtb3ZlQ2hpbGQoZWwubGFzdENoaWxkKTtcclxuXHRcdH1cclxuXHR9XHJcbn1cclxuZnVuY3Rpb24gUm91dGUoZWwsIGNvbGxiYWNrKXtcclxuICAgIGlmKGVsKXtcclxuICAgICAgICBjb2xsYmFjayhlbCk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gQ3JlYXRlRWxlbWVudChkYXRhKSB7XHJcbiAgICBsZXQgdGFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChkYXRhLnRhZyk7XHJcbiAgICBpZiAoXCJjbGFzc1wiIGluIGRhdGEpIHtcclxuICAgICAgICB0YWcuY2xhc3NMaXN0LmFkZChkYXRhLmNsYXNzKTtcclxuICAgIH1cclxuICAgIGlmIChcImF0dHJpYnV0ZVwiIGluIGRhdGEpIHtcclxuICAgICAgICBmb3IgKGxldCBhdHQgaW4gZGF0YS5hdHRyaWJ1dGUpIHtcclxuICAgICAgICAgICAgdGFnLnNldEF0dHJpYnV0ZShhdHQsIGRhdGEuYXR0cmlidXRlW2F0dF0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChcImNvbnRlbnRcIiBpbiBkYXRhKSB7XHJcbiAgICAgICAgdGFnLmlubmVyVGV4dCA9IGRhdGEuY29udGVudDtcclxuICAgIH1cclxuICAgIHJldHVybiB0YWc7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIEhUTUxSZW5kZXIoZWxlbWVudCwgZGF0YSkge1xyXG4gICAgZnVuY3Rpb24gcmVuZGVyKGVsLCBkYXRhKSB7XHJcbiAgICAgICAgbGV0IGl0ZW0gPSBudWxsO1xyXG4gICAgICAgIGZvciAobGV0IGQgb2YgZGF0YS5lbCkge1xyXG4gICAgICAgICAgICBpdGVtID0gQ3JlYXRlRWxlbWVudChkKTtcclxuICAgICAgICAgICAgZWwuYXBwZW5kQ2hpbGQoaXRlbSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoXCJldmVudFwiIGluIGQpIHtcclxuICAgICAgICAgICAgICAgIGZvcihsZXQgZXZlbnQgaW4gZC5ldmVudCl7XHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbS5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBkLmV2ZW50W2V2ZW50XSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmIChkLmVsICYmIGQuZWxbMF0pIHtcclxuICAgICAgICAgICAgICAgIHJlbmRlcihpdGVtLCBkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGxldCBjcmVhdCA9IGZ1bmN0aW9uKG9iail7XHJcbiAgICAgICAgbGV0IHBhcmVudCA9IENyZWF0ZUVsZW1lbnQob2JqKTtcclxuICAgICAgICByZW5kZXIocGFyZW50LCBvYmopO1xyXG4gICAgICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQocGFyZW50KTtcclxuICAgICAgICByZXR1cm4gcGFyZW50O1xyXG4gICAgfTtcclxuICAgIGxldCBlbCA9IG51bGw7XHJcbiAgICBpZihBcnJheS5pc0FycmF5KGRhdGEpKXtcclxuICAgICAgICBmb3IobGV0IGl0ZW0gb2YgZGF0YSl7XHJcbiAgICAgICAgICAgIGVsLnB1c2goY3JlYXQoaXRlbS5lbCkpO1xyXG4gICAgICAgIH1cclxuICAgIH1lbHNle1xyXG4gICAgICAgIGVsID0gY3JlYXQoZGF0YS5lbCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGVsO1xyXG59XHJcbmZ1bmN0aW9uIGdldENTU1Byb3BlcnR5KGVsLCBwcm9wZXJ0eSl7XHJcbiAgICBsZXQgcmVzID0gMDtcclxuXHJcbiAgICBpZihlbC5zdHlsZVtwcm9wZXJ0eV0pe1xyXG4gICAgICAgIHJlcyA9IGVsLnN0eWxlW3Byb3BlcnR5XTtcclxuICAgIH1lbHNle1xyXG4gICAgICAgIHJlcyA9IGdldENvbXB1dGVkU3R5bGUoZWwpW3Byb3BlcnR5XTtcclxuICAgIH1cclxuICAgIHJlcyA9ICsoIHJlcy5yZXBsYWNlKC9bXlxcZF0vZywgJycpICk7XHJcblxyXG4gICAgcmV0dXJuIGlzTmFOKHJlcykgPyAwIDogcmVzO1xyXG59XHJcbmZ1bmN0aW9uIExvYWRGaWxlKGF0dHJpYnV0ZSwgdGFnLCBzdGF0dXMgPSBmYWxzZSl7XHJcbiAgICBpZighc3RhdHVzKXtcclxuICAgICAgICByZXR1cm4gSFRNTFJlbmRlcihkb2N1bWVudC5ib2R5LCB7XHJcbiAgICAgICAgICAgIFwiZWxcIiA6IHtcclxuICAgICAgICAgICAgICAgIFwidGFnXCIgOiB0YWcsXHJcbiAgICAgICAgICAgICAgICBcImF0dHJpYnV0ZVwiIDogYXR0cmlidXRlLFxyXG4gICAgICAgICAgICAgICAgXCJlbFwiIDogW11cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcblxyXG5Sb3V0ZShcclxuICAgIEFycmF5LmZyb20oIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJjYXJvdXNlbFwiKSApLFxyXG4gICAgKGl0ZW1zKSA9PiB7XHJcbiAgICAgICAgZnVuY3Rpb24gQ2Fyb3VzZWwoY2Fyb3VzZWwpe1xyXG4gICAgICAgIFxyXG4gICAgICAgICAgICBsZXQgY2Fyb3VzZWxCb2R5ID0gY2Fyb3VzZWwuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImNhcm91c2VsLWJvZHlcIilbMF07XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgIGxldCBtYXhQb3N0SWQgPSAwO1xyXG4gICAgICAgICAgICBsZXQgY2xhc3NOYW1lTmF2SXRlbSA9IFwiYWN0aXZlXCI7XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIENsaWNsZWRJdGVtKGV2LCBlbCl7XHJcbiAgICAgICAgICAgICAgICBlbCA9IGVsICE9IHdpbmRvdyA/IGVsIDogbnVsbDtcclxuICAgICAgICAgICAgICAgIGxldCBpZCA9IDA7XHJcbiAgICAgICAgICAgICAgICBsZXQgaXRlbXMgPSBjYXJvdXNlbC5xdWVyeVNlbGVjdG9yQWxsKFwiLmNhcm91c2UtbmF2ID4gdWwgPiBsaVwiKTtcclxuICAgICAgICBcclxuICAgICAgICAgICAgICAgIGZvcihsZXQgaXRlbSBvZiBpdGVtcyl7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoZWwgPT0gaXRlbSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZCsrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgICAgICAgICAgbGV0IG4gPSAwO1xyXG4gICAgICAgICAgICAgICAgZm9yKGxldCBpdGVtIG9mIGNhcm91c2VsQm9keS5jaGlsZHJlbil7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYobiA8IGlkKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5jbGFzc0xpc3QuYWRkKFwiaGlkZGVuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggKChtYXhQb3N0SWQgLSAxKSA+IG4gKSB8fCAoICgobWF4UG9zdElkIC0gMSkgKyBpZCkgPj0gbikgKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uY2xhc3NMaXN0LnJlbW92ZShcImhpZGRlblwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmNsYXNzTGlzdC5hZGQoXCJoaWRkZW5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgbisrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgICAgICAgICAgbGV0IHJlbW92ZUNsYXNzID0gY2Fyb3VzZWwucXVlcnlTZWxlY3RvcihcIi5jYXJvdXNlLW5hdiA+IHVsID4gbGkuYWN0aXZlXCIpO1xyXG4gICAgICAgICAgICAgICAgaWYocmVtb3ZlQ2xhc3Mpe1xyXG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzLmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lTmF2SXRlbSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpdGVtc1tpZF0uY2xhc3NMaXN0LmFkZChjbGFzc05hbWVOYXZJdGVtKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgICAgICBmdW5jdGlvbiBDcmVhdGVDYXJvdXNlbE5hdmlnYXRpb24oKXtcclxuICAgICAgICBcclxuICAgICAgICAgICAgICAgIGxldCBwdXNoT2JqSXRlbSA9IGZ1bmN0aW9uKGNsYXNzTmFtZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgXCJ0YWdcIiA6IFwibGlcIiwgXCJhdHRyaWJ1dGVcIiA6IHsgXCJjbGFzc1wiIDogXCJjYXJvdXNlbC1uYXYtY2lyY2xlXCIgKyBjbGFzc05hbWUgfSwgXCJjb250ZW50XCIgOiBcIlwiLCBcImV2ZW50XCIgOiB7IFwiY2xpY2tcIiA6IGZ1bmN0aW9uKGV2KXsgQ2xpY2xlZEl0ZW0oZXYsIHRoaXMpIH0gIH0gfTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBsZXQgZGF0YSA9IHtcclxuICAgICAgICAgICAgICAgICAgICBcImVsXCIgOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwidGFnXCIgOiBcInVsXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZWxcIiA6IFtdXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICBcclxuICAgICAgICAgICAgICAgIGZvcihsZXQgbiA9IDAsIGNvdW50SXRlbSA9IGNhcm91c2VsQm9keS5jaGlsZHJlbi5sZW5ndGggLSAobWF4UG9zdElkIC0gMSk7IG4gPCBjb3VudEl0ZW07IG4rKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5lbC5lbC5wdXNoKCBwdXNoT2JqSXRlbSggKG4gPT0gMCkgPyBcIiBcIiArY2xhc3NOYW1lTmF2SXRlbSA6IFwiXCIpICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBIVE1MUmVuZGVyKGNhcm91c2VsLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJjYXJvdXNlLW5hdlwiKVswXSwgZGF0YSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAgICAgZnVuY3Rpb24gQ2Fyb3VzZWxTY3JvbGwoKXtcclxuICAgICAgICAgICAgICAgIGxldCBwYXJlbnRXaWR0aCA9IGNhcm91c2VsQm9keS5jbGllbnRXaWR0aDtcclxuICAgICAgICAgICAgICAgIGxldCBtYXJnaW5SaWdodCA9IGdldENTU1Byb3BlcnR5KCBjYXJvdXNlbEJvZHkuY2hpbGRyZW5bMF0sIFwibWFyZ2luUmlnaHRcIiApO1xyXG4gICAgICAgICAgICAgICAgbGV0IGl0ZW1XaWR0aCA9IG1hcmdpblJpZ2h0ICsgY2Fyb3VzZWxCb2R5LmNoaWxkcmVuWzBdLmNsaWVudFdpZHRoO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIG1heFBvc3RJZCA9IH5+KHBhcmVudFdpZHRoIC8gaXRlbVdpZHRoICk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBmb3IobGV0IG4gPSBtYXhQb3N0SWQsIGxlbmd0aCA9IGNhcm91c2VsQm9keS5jaGlsZHJlbi5sZW5ndGg7IG4gPCBsZW5ndGg7IG4rKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgY2Fyb3VzZWxCb2R5LmNoaWxkcmVuW25dLmNsYXNzTGlzdC5hZGQoXCJoaWRkZW5cIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAgICAgZnVuY3Rpb24gTWVkaWEoKXtcclxuICAgICAgICAgICAgICAgIGlmKGNhcm91c2VsLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJjYXJvdXNlLW5hdlwiKVswXSl7XHJcbiAgICAgICAgICAgICAgICAgICAgQ2xlYXJFbGVtZW50KFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJvdXNlbC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiY2Fyb3VzZS1uYXZcIilbMF1cclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZm9yKGxldCBuID0gMCwgbGVuZ3RoID0gY2Fyb3VzZWxCb2R5LmNoaWxkcmVuLmxlbmd0aDsgbiA8IGxlbmd0aDsgbisrKXtcclxuICAgICAgICAgICAgICAgICAgICBjYXJvdXNlbEJvZHkuY2hpbGRyZW5bbl0uY2xhc3NMaXN0LnJlbW92ZShcImhpZGRlblwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIENhcm91c2VsU2Nyb2xsKCk7XHJcbiAgICAgICAgICAgICAgICBDcmVhdGVDYXJvdXNlbE5hdmlnYXRpb24oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgICAgICBDYXJvdXNlbFNjcm9sbCgpO1xyXG4gICAgICAgICAgICBDcmVhdGVDYXJvdXNlbE5hdmlnYXRpb24oKTtcclxuICAgICAgICBcclxuICAgICAgICAgICAgcmVzaXplLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgXCJmdW5cIiA6IGZ1bmN0aW9uKCl7IE1lZGlhKCk7IH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IobGV0IGl0ZW0gb2YgaXRlbXMpe1xyXG4gICAgICAgICAgICBDYXJvdXNlbChpdGVtKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG4pO1xyXG5cclxuUm91dGUoXHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm1hcFwiKSxcclxuICAgIChtYXApID0+IHtcclxuICAgICAgICBmdW5jdGlvbiBNYXBMYXllcnMoKXtcclxuICAgICAgICBcdGxldCBtYXBib3ggPSBmdW5jdGlvbihpZCl7XHJcbiAgICAgICAgXHRcdHJldHVybiBMLnRpbGVMYXllcihcImh0dHBzOi8vYXBpLnRpbGVzLm1hcGJveC5jb20vdjQve2lkfS97en0ve3h9L3t5fS5wbmc/YWNjZXNzX3Rva2VuPXBrLmV5SjFJam9pYldGd1ltOTRJaXdpWVNJNkltTnBlalk0TlhWeWNUQTJlbVl5Y1hCbmRIUnFjbVozTjNnaWZRLnJKY0ZJRzIxNEFyaUlTTGJCNkI1YXdcIiwge1xyXG4gICAgICAgIFx0XHRcdFwiaWRcIiA6IGlkLFxyXG4gICAgICAgIFx0XHRcdFwiYXR0cmlidXRpb25cIiA6ICdNYXAgZGF0YSAmY29weTsgPGEgaHJlZj1cImh0dHBzOi8vd3d3Lm9wZW5zdHJlZXRtYXAub3JnL1wiPk9wZW5TdHJlZXRNYXA8L2E+IGNvbnRyaWJ1dG9ycywnICtcclxuICAgICAgICBcdFx0XHRcdFx0XHRcdCc8YSBocmVmPVwiaHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LXNhLzIuMC9cIj5DQy1CWS1TQTwvYT4sICcgK1xyXG4gICAgICAgIFx0XHRcdFx0XHRcdFx0J0ltYWdlcnkgwqkgPGEgaHJlZj1cImh0dHBzOi8vd3d3Lm1hcGJveC5jb20vXCI+TWFwYm94PC9hPidcclxuICAgICAgICBcdFx0fSk7XHJcbiAgICAgICAgXHR9O1xyXG4gICAgICAgIFxyXG4gICAgICAgIFx0cmV0dXJuIHtcclxuICAgICAgICBcdFx0XCJvcGVuc3RyZWV0bWFwXCIgOiBMLnRpbGVMYXllcihcclxuICAgICAgICBcdFx0XHRcImh0dHBzOi8ve3N9LnRpbGUub3BlbnN0cmVldG1hcC5vcmcve3p9L3t4fS97eX0ucG5nXCIsXHJcbiAgICAgICAgXHRcdFx0e1xyXG4gICAgICAgIFx0XHRcdFx0YXR0cmlidXRpb246ICcmY29weTsgPGEgaHJlZj1cImh0dHBzOi8vd3d3Lm9wZW5zdHJlZXRtYXAub3JnL2NvcHlyaWdodFwiPk9wZW5TdHJlZXRNYXA8L2E+IGNvbnRyaWJ1dG9ycydcclxuICAgICAgICBcdFx0XHR9XHJcbiAgICAgICAgXHRcdCksXHJcbiAgICAgICAgXHRcdFwibWFwYm94LnN0cmVldHNcIiA6IG1hcGJveChcIm1hcGJveC5zdHJlZXRzXCIpLFxyXG4gICAgICAgIFx0XHRcIm1hcGJveC5saWdodFwiIDogbWFwYm94KFwibWFwYm94LmxpZ2h0XCIpXHJcbiAgICAgICAgXHR9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBmdW5jdGlvbiBNYXBNYXJrZXIoKXtcclxuICAgICAgICBcdHJldHVybiBbXHJcbiAgICAgICAgXHRcdHtcclxuICAgICAgICBcdFx0XHRcImxhdExuZ1wiIDogWyA1MC41MjUxMDI3LCAzMC4zNDg4MDAzIF0sXHJcbiAgICAgICAgXHRcdFx0XCJ0ZXh0XCIgOiBcIkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ZXIgYWRpcGlzY2luZyBlbGl0LiBBZW5lYW4gY29tbW9kbyBsaWd1bGEgZWdldCBkb2xvci4gQWVuZWFuIG1hc3NhLlwiXHJcbiAgICAgICAgXHRcdH1cclxuICAgICAgICBcdF1cclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgZnVuY3Rpb24gQWRkTWFya2VyKG1hcCl7XHJcbiAgICAgICAgXHRsZXQgbWFya2VycyA9IE1hcE1hcmtlcigpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIFx0Zm9yKG1hcmtlciBvZiBtYXJrZXJzKXtcclxuICAgICAgICBcdFx0TC5tYXJrZXIobWFya2VyLmxhdExuZykuYWRkVG8obWFwKVxyXG4gICAgICAgICAgICAgICAgXHQuYmluZFBvcHVwKG1hcmtlci50ZXh0KTtcclxuICAgICAgICBcdH1cclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgZnVuY3Rpb24gTGVhZmxldChsYXRsbmcpe1xyXG4gICAgICAgIFx0bGV0IG1hcExheWVycyA9IG5ldyBNYXBMYXllcnMoKTtcclxuICAgICAgICBcdGxldCBkZWZhdWx0TWFwID0gXCJtYXBib3guc3RyZWV0c1wiO1xyXG4gICAgICAgIFxyXG4gICAgICAgIFx0bGV0IG1hcCA9IEwubWFwKCdtYXAnLCB7XHJcbiAgICAgICAgXHRcdGNlbnRlcjogbGF0bG5nLFxyXG4gICAgICAgIFx0XHR6b29tOiAxMCxcclxuICAgICAgICBcdFx0bGF5ZXJzOiBtYXBMYXllcnNbZGVmYXVsdE1hcF1cclxuICAgICAgICBcdH0pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIFx0QWRkTWFya2VyKG1hcCk7XHJcbiAgICAgICAgXHRcclxuICAgICAgICBcdEwuY29udHJvbC5sYXllcnMobWFwTGF5ZXJzKS5hZGRUbyhtYXApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBmdW5jdGlvbiBDb250YWN0cygpe1xyXG4gICAgICAgIFx0bGV0IGxhdGxuZyA9IFs1MC41MjUxMDI3LCAzMC4zNDg4MDAzXTtcclxuICAgICAgICAgICAgTGVhZmxldChsYXRsbmcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGxlYWZsZXRqcyA9IExvYWRGaWxlKHtcclxuICAgICAgICAgICAgICAgIFwic3JjXCIgOiBcImh0dHBzOi8vdW5wa2cuY29tL2xlYWZsZXRAMS41LjEvZGlzdC9sZWFmbGV0LmpzXCIsXHJcbiAgICAgICAgICAgICAgICBcImludGVncml0eVwiIDogXCJzaGE1MTItR2ZmUE1GM1J2TWVZeWMxTFdNSHRLOEViUHYwaU5aOC9vVHRIUHg5L2NjMklMeFErdTkwNXFJd2RwVUxhcURreUJLZ09hQjU3UVRNZzd6dGc4Sm0yT2c9PVwiLFxyXG4gICAgICAgICAgICAgICAgXCJjcm9zc29yaWdpblwiIDogXCJcIixcclxuICAgICAgICAgICAgICAgIFwiYXN5bmNcIjogZmFsc2VcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgXCJzY3JpcHRcIlxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIGxldCBsZWFmbGV0Y3NzID0gTG9hZEZpbGUoe1xyXG4gICAgICAgICAgICBcInJlbFwiIDogXCJzdHlsZXNoZWV0XCIsXHJcbiAgICAgICAgICAgIFwiaHJlZlwiIDogXCJodHRwczovL3VucGtnLmNvbS9sZWFmbGV0QDEuNS4xL2Rpc3QvbGVhZmxldC5jc3NcIixcclxuICAgICAgICAgICAgXCJpbnRlZ3JpdHlcIiA6IFwic2hhNTEyLXh3RS9Bejl6cmpCSXBoQWNCYjNGNkpWcXhmNDYrQ0RMd2ZMTUhsb051NktFUUNBV2k2SGNEVWJlT2ZCSXB0Rjd0Y0N6dXNLRmpGdzJ5dXZFcERMOXdRPT1cIixcclxuICAgICAgICAgICAgXCJjcm9zc29yaWdpblwiIDogXCJcIlxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBcImxpbmtcIlxyXG4gICAgICAgICk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgbGVhZmxldGpzLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIENvbnRhY3RzKTtcclxuXHJcbiAgICAgICAgbGVhZmxldGpzLmFkZEV2ZW50TGlzdGVuZXIoXCJvbmVycm9yIFwiLCBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICBsZWFmbGV0anMgPSBMb2FkRmlsZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJzcmNcIiA6IFwiLi9hc3NldHMvbGliL2xlYWZsZXRqcy0xLjUuMS9sZWFmbGV0anMuanNcIlxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIFwic2NyaXB0XCJcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgbGVhZmxldGpzLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIENvbnRhY3RzKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgbGVhZmxldGNzcy5hZGRFdmVudExpc3RlbmVyKFwib25lcnJvciBcIiwgZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgTG9hZEZpbGUoe1xyXG4gICAgICAgICAgICAgICAgICAgIFwicmVsXCIgOiBcInN0eWxlc2hlZXRcIixcclxuICAgICAgICAgICAgICAgICAgICBcImhyZWZcIiA6IFwiLi9hc3NldHMvbGliL2xlYWZsZXRqcy0xLjUuMS9sZWFmbGV0anMuY3NzXCJcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBcImxpbmtcIlxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4pO1xyXG5cclxuZnVuY3Rpb24gV2luZG93UmVzaXplKGV2KXtcclxuICAgIGZvcihsZXQgY29sbGJhY2sgb2YgcmVzaXplKXtcclxuICAgICAgICBjb2xsYmFjay5mdW4oKTtcclxuICAgIH1cclxufVxyXG5cclxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgV2luZG93UmVzaXplKTsiXSwiZmlsZSI6Im1haW4tbWluLmpzIn0=
