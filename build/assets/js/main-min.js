let resize=[];function ClearElement(e){if(e.lastChild)for(;e.hasChildNodes();)e.removeChild(e.lastChild)}function CreateElement(e){let t=document.createElement(e.tag);if("class"in e&&t.classList.add(e.class),"attribute"in e)for(let n in e.attribute)t.setAttribute(n,e.attribute[n]);return"content"in e&&(t.innerText=e.content),t}function HTMLRender(e,t){let n=function(t){let n=CreateElement(t);return function e(t,n){let l=null;for(let r of n.el){if(l=CreateElement(r),t.appendChild(l),"event"in r)for(let e in r.event)l.addEventListener(e,r.event[e]);r.el&&r.el[0]&&e(l,r)}}(n,t),e.appendChild(n),n},l=null;if(Array.isArray(t))for(let e of t)l.push(n(e.el));else l=n(t.el);return l}function getCSSProperty(e,t){let n=0;return n=+(n=e.style[t]?e.style[t]:getComputedStyle(e)[t]).replace(/[^\d]/g,""),isNaN(n)?0:n}function LoadFile(e,t,n=!1){if(!n)return HTMLRender(document.body,{el:{tag:t,attribute:e,el:[]}})}function WindowResize(e){for(let e of resize)e.fun()}!function(e){if(0==e.length)return null;function t(e){let t=e.getElementsByClassName("carousel-body")[0],n=t.children,l=n[0].clientWidth+getCSSProperty(n[0],"marginRight"),r="active",i=1,a=0,o=~~(t.clientWidth/l),s=0;function c(){let t=0;for(let e of n)a>t||o-1<t?e.classList.add("hidden"):e.classList.remove("hidden"),t++;let l=e.querySelectorAll(".carousel-nav-circle."+r)[0];l&&l.classList.remove(r),e.querySelectorAll(".carousel-nav-circle")[a].classList.add(r)}function u(){let t=n.length-o,l=e.getElementsByClassName("carousel-nav")[0],r=function(){return{tag:"li",attribute:{class:"carousel-nav-circle"},content:"",event:{click:function(t){!function(t,n){let l=0;for(let t of e.querySelectorAll(".carousel-nav > ul > li")){if(n==t)break;l++}a=l,s>l?o-=s-l:o+=l-s,c(),s=l}(0,this)}}}},u={el:{tag:"ul",el:[]}};for(let e=0,n=t/i;e<=n;e++)u.el.el.push(r());l.children.length>0&&ClearElement(l),HTMLRender(l,u),c()}u(),resize.push({fun:function(){s=a=0,o=~~(t.clientWidth/l),u()}})}for(let n of e)t(n)}(Array.from(document.getElementsByClassName("carousel"))),function(e){if(!(document.getElementById("map")instanceof HTMLElement))return null;function t(){let e=function(e){return L.tileLayer("https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw",{id:e,attribution:'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors,<a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery Â© <a href="https://www.mapbox.com/">Mapbox</a>'})};return{openstreetmap:L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",{attribution:'&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'}),"mapbox.streets":e("mapbox.streets"),"mapbox.light":e("mapbox.light")}}function n(e){let n=new t,l=L.map("map",{center:e,zoom:10,layers:n["mapbox.streets"]});!function(e){let t=[{latLng:[50.5251027,30.3488003],text:"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa."}];for(marker of t)L.marker(marker.latLng).addTo(e).bindPopup(marker.text)}(l),L.control.layers(n).addTo(l)}function l(){n([50.5251027,30.3488003])}let r=LoadFile({src:"https://unpkg.com/leaflet@1.5.1/dist/leaflet.js",integrity:"sha512-GffPMF3RvMeYyc1LWMHtK8EbPv0iNZ8/oTtHPx9/cc2ILxQ+u905qIwdpULaqDkyBKgOaB57QTMg7ztg8Jm2Og==",crossorigin:"",async:!1},"script"),i=LoadFile({rel:"stylesheet",href:"https://unpkg.com/leaflet@1.5.1/dist/leaflet.css",integrity:"sha512-xwE/Az9zrjBIphAcBb3F6JVqxf46+CDLwfLMHloNu6KEQCAWi6HcDUbeOfBIptF7tcCzusKFjFw2yuvEpDL9wQ==",crossorigin:""},"link");r.addEventListener("load",l),r.addEventListener("onerror ",function(){(r=LoadFile({src:"./assets/lib/leafletjs-1.5.1/leafletjs.js"},"script")).addEventListener("load",l)}),i.addEventListener("onerror ",function(){LoadFile({rel:"stylesheet",href:"./assets/lib/leafletjs-1.5.1/leafletjs.css"},"link")})}(),window.addEventListener("resize",WindowResize);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsicmVzaXplIiwiQ2xlYXJFbGVtZW50IiwiZWwiLCJsYXN0Q2hpbGQiLCJoYXNDaGlsZE5vZGVzIiwicmVtb3ZlQ2hpbGQiLCJDcmVhdGVFbGVtZW50IiwiZGF0YSIsInRhZyIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTGlzdCIsImFkZCIsImNsYXNzIiwiYXR0IiwiYXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwiaW5uZXJUZXh0IiwiY29udGVudCIsIkhUTUxSZW5kZXIiLCJlbGVtZW50IiwiY3JlYXQiLCJvYmoiLCJwYXJlbnQiLCJyZW5kZXIiLCJpdGVtIiwiZCIsImFwcGVuZENoaWxkIiwiZXZlbnQiLCJhZGRFdmVudExpc3RlbmVyIiwiQXJyYXkiLCJpc0FycmF5IiwicHVzaCIsImdldENTU1Byb3BlcnR5IiwicHJvcGVydHkiLCJyZXMiLCJzdHlsZSIsImdldENvbXB1dGVkU3R5bGUiLCJyZXBsYWNlIiwiaXNOYU4iLCJMb2FkRmlsZSIsInN0YXR1cyIsImJvZHkiLCJXaW5kb3dSZXNpemUiLCJldiIsImNvbGxiYWNrIiwiZnVuIiwiaXRlbXMiLCJsZW5ndGgiLCJDYXJvdXNlbCIsImNhcm91c2VsIiwiY2Fyb3VzZWxCb2R5IiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsImNoaWxkcmVuIiwiaXRlbUluZm8iLCJjbGllbnRXaWR0aCIsImNsYXNzTmFtZU5hdkl0ZW1BY3RpdmUiLCJzY3JvbGxOIiwic2Nyb2xsX3N0YXJ0Iiwic2Nyb2xsX2VuZCIsInByZXZpb3VzSWQiLCJVcGRhdGUiLCJuIiwicmVtb3ZlIiwicmVtb3ZlQ2xhc3NOYW1lIiwicXVlcnlTZWxlY3RvckFsbCIsIkNyZWF0ZU5hdiIsImhpZGRlbkNvdW50IiwibmF2SXRlbXMiLCJuYXZJdGVtIiwiY2xpY2siLCJpZCIsIkNsaWNrZWQiLCJ0aGlzIiwiY291bnQiLCJmcm9tIiwibWFwIiwiZ2V0RWxlbWVudEJ5SWQiLCJIVE1MRWxlbWVudCIsIk1hcExheWVycyIsIm1hcGJveCIsIkwiLCJ0aWxlTGF5ZXIiLCJhdHRyaWJ1dGlvbiIsIm9wZW5zdHJlZXRtYXAiLCJtYXBib3guc3RyZWV0cyIsIm1hcGJveC5saWdodCIsIkxlYWZsZXQiLCJsYXRsbmciLCJtYXBMYXllcnMiLCJjZW50ZXIiLCJ6b29tIiwibGF5ZXJzIiwibWFya2VycyIsImxhdExuZyIsInRleHQiLCJtYXJrZXIiLCJhZGRUbyIsImJpbmRQb3B1cCIsIkFkZE1hcmtlciIsImNvbnRyb2wiLCJDb250YWN0cyIsImxlYWZsZXRqcyIsInNyYyIsImludGVncml0eSIsImNyb3Nzb3JpZ2luIiwiYXN5bmMiLCJsZWFmbGV0Y3NzIiwicmVsIiwiaHJlZiIsIndpbmRvdyJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsT0FBUyxHQUViLFNBQVNDLGFBQWFDLEdBQ3JCLEdBQUlBLEVBQUdDLFVBQ04sS0FBT0QsRUFBR0UsaUJBQ1RGLEVBQUdHLFlBQVlILEVBQUdDLFdBSXJCLFNBQVNHLGNBQWNDLEdBQ25CLElBQUlDLEVBQU1DLFNBQVNDLGNBQWNILEVBQUtDLEtBSXRDLEdBSEksVUFBV0QsR0FDWEMsRUFBSUcsVUFBVUMsSUFBSUwsRUFBS00sT0FFdkIsY0FBZU4sRUFDZixJQUFLLElBQUlPLEtBQU9QLEVBQUtRLFVBQ2pCUCxFQUFJUSxhQUFhRixFQUFLUCxFQUFLUSxVQUFVRCxJQU03QyxNQUhJLFlBQWFQLElBQ2JDLEVBQUlTLFVBQVlWLEVBQUtXLFNBRWxCVixFQUdYLFNBQVNXLFdBQVdDLEVBQVNiLEdBa0J6QixJQUFJYyxFQUFRLFNBQVNDLEdBQ2pCLElBQUlDLEVBQVNqQixjQUFjZ0IsR0FHM0IsT0FyQkosU0FBU0UsRUFBT3RCLEVBQUlLLEdBQ2hCLElBQUlrQixFQUFPLEtBQ1gsSUFBSyxJQUFJQyxLQUFLbkIsRUFBS0wsR0FBSSxDQUluQixHQUhBdUIsRUFBT25CLGNBQWNvQixHQUNyQnhCLEVBQUd5QixZQUFZRixHQUVYLFVBQVdDLEVBQ1gsSUFBSSxJQUFJRSxL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QVMsQ0FDYitELElBQVEsNkNBRVosV0FFTTFFLGlCQUFpQixPQUFRd0UsS0FHdkNNLEVBQVc5RSxpQkFBaUIsV0FBWSxXQUNwQ1csU0FBUyxDQUNEb0UsSUFBUSxhQUNSQyxLQUFTLDhDQUViLFVBakdaLEdBNkdBQyxPQUFPakYsaUJBQWlCLFNBQVVjIiwic291cmNlc0NvbnRlbnQiOlsibGV0IHJlc2l6ZSA9IFtdO1xyXG5cclxuZnVuY3Rpb24gQ2xlYXJFbGVtZW50KGVsKXtcclxuXHRpZiAoZWwubGFzdENoaWxkKXtcclxuXHRcdHdoaWxlIChlbC5oYXNDaGlsZE5vZGVzKCkpe1xyXG5cdFx0XHRlbC5yZW1vdmVDaGlsZChlbC5sYXN0Q2hpbGQpO1xyXG5cdFx0fVxyXG5cdH1cclxufVxyXG5mdW5jdGlvbiBDcmVhdGVFbGVtZW50KGRhdGEpIHtcclxuICAgIGxldCB0YWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGRhdGEudGFnKTtcclxuICAgIGlmIChcImNsYXNzXCIgaW4gZGF0YSkge1xyXG4gICAgICAgIHRhZy5jbGFzc0xpc3QuYWRkKGRhdGEuY2xhc3MpO1xyXG4gICAgfVxyXG4gICAgaWYgKFwiYXR0cmlidXRlXCIgaW4gZGF0YSkge1xyXG4gICAgICAgIGZvciAobGV0IGF0dCBpbiBkYXRhLmF0dHJpYnV0ZSkge1xyXG4gICAgICAgICAgICB0YWcuc2V0QXR0cmlidXRlKGF0dCwgZGF0YS5hdHRyaWJ1dGVbYXR0XSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKFwiY29udGVudFwiIGluIGRhdGEpIHtcclxuICAgICAgICB0YWcuaW5uZXJUZXh0ID0gZGF0YS5jb250ZW50O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRhZztcclxufVxyXG5cclxuZnVuY3Rpb24gSFRNTFJlbmRlcihlbGVtZW50LCBkYXRhKSB7XHJcbiAgICBmdW5jdGlvbiByZW5kZXIoZWwsIGRhdGEpIHtcclxuICAgICAgICBsZXQgaXRlbSA9IG51bGw7XHJcbiAgICAgICAgZm9yIChsZXQgZCBvZiBkYXRhLmVsKSB7XHJcbiAgICAgICAgICAgIGl0ZW0gPSBDcmVhdGVFbGVtZW50KGQpO1xyXG4gICAgICAgICAgICBlbC5hcHBlbmRDaGlsZChpdGVtKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChcImV2ZW50XCIgaW4gZCkge1xyXG4gICAgICAgICAgICAgICAgZm9yKGxldCBldmVudCBpbiBkLmV2ZW50KXtcclxuICAgICAgICAgICAgICAgICAgICBpdGVtLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGQuZXZlbnRbZXZlbnRdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYgKGQuZWwgJiYgZC5lbFswXSkge1xyXG4gICAgICAgICAgICAgICAgcmVuZGVyKGl0ZW0sIGQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgbGV0IGNyZWF0ID0gZnVuY3Rpb24ob2JqKXtcclxuICAgICAgICBsZXQgcGFyZW50ID0gQ3JlYXRlRWxlbWVudChvYmopO1xyXG4gICAgICAgIHJlbmRlcihwYXJlbnQsIG9iaik7XHJcbiAgICAgICAgZWxlbWVudC5hcHBlbmRDaGlsZChwYXJlbnQpO1xyXG4gICAgICAgIHJldHVybiBwYXJlbnQ7XHJcbiAgICB9O1xyXG4gICAgbGV0IGVsID0gbnVsbDtcclxuICAgIGlmKEFycmF5LmlzQXJyYXkoZGF0YSkpe1xyXG4gICAgICAgIGZvcihsZXQgaXRlbSBvZiBkYXRhKXtcclxuICAgICAgICAgICAgZWwucHVzaChjcmVhdChpdGVtLmVsKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfWVsc2V7XHJcbiAgICAgICAgZWwgPSBjcmVhdChkYXRhLmVsKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZWw7XHJcbn1cclxuZnVuY3Rpb24gZ2V0Q1NTUHJvcGVydHkoZWwsIHByb3BlcnR5KXtcclxuICAgIGxldCByZXMgPSAwO1xyXG5cclxuICAgIGlmKGVsLnN0eWxlW3Byb3BlcnR5XSl7XHJcbiAgICAgICAgcmVzID0gZWwuc3R5bGVbcHJvcGVydHldO1xyXG4gICAgfWVsc2V7XHJcbiAgICAgICAgcmVzID0gZ2V0Q29tcHV0ZWRTdHlsZShlbClbcHJvcGVydHldO1xyXG4gICAgfVxyXG4gICAgcmVzID0gKyggcmVzLnJlcGxhY2UoL1teXFxkXS9nLCAnJykgKTtcclxuXHJcbiAgICByZXR1cm4gaXNOYU4ocmVzKSA/IDAgOiByZXM7XHJcbn1cclxuZnVuY3Rpb24gTG9hZEZpbGUoYXR0cmlidXRlLCB0YWcsIHN0YXR1cyA9IGZhbHNlKXtcclxuICAgIGlmKCFzdGF0dXMpe1xyXG4gICAgICAgIHJldHVybiBIVE1MUmVuZGVyKGRvY3VtZW50LmJvZHksIHtcclxuICAgICAgICAgICAgXCJlbFwiIDoge1xyXG4gICAgICAgICAgICAgICAgXCJ0YWdcIiA6IHRhZyxcclxuICAgICAgICAgICAgICAgIFwiYXR0cmlidXRlXCIgOiBhdHRyaWJ1dGUsXHJcbiAgICAgICAgICAgICAgICBcImVsXCIgOiBbXVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbihmdW5jdGlvbiggaXRlbXMgKXtcclxuICAgIGlmKCAwID09IGl0ZW1zLmxlbmd0aCApeyAvKiAuLi4gKi8gcmV0dXJuIG51bGw7fVxyXG5cclxuICAgIGZ1bmN0aW9uIENhcm91c2VsKGNhcm91c2VsKXtcclxuICAgIFxyXG4gICAgICAgIGxldCBjYXJvdXNlbEJvZHkgPSBjYXJvdXNlbC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdjYXJvdXNlbC1ib2R5JylbMF07XHJcbiAgICAgICAgbGV0IGl0ZW1zID0gY2Fyb3VzZWxCb2R5LmNoaWxkcmVuO1xyXG4gICAgXHJcbiAgICAgICAgbGV0IGl0ZW1JbmZvID0gKCBpdGVtc1swXS5jbGllbnRXaWR0aCArIGdldENTU1Byb3BlcnR5KCBpdGVtc1swXSwgXCJtYXJnaW5SaWdodFwiICkgKTtcclxuICAgIFxyXG4gICAgICAgIGxldCBjbGFzc05hbWVOYXZJdGVtQWN0aXZlID0gXCJhY3RpdmVcIjtcclxuICAgICAgICBsZXQgc2Nyb2xsTiA9IDE7XHJcbiAgICBcclxuICAgICAgICBsZXQgc2Nyb2xsX3N0YXJ0ID0gMDtcclxuICAgICAgICBsZXQgc2Nyb2xsX2VuZCA9IH5+KCBjYXJvdXNlbEJvZHkuY2xpZW50V2lkdGggLyBpdGVtSW5mbyApO1xyXG4gICAgICAgIGxldCBwcmV2aW91c0lkID0gMDtcclxuICAgIFxyXG4gICAgICAgIGZ1bmN0aW9uIENsaWNrZWQoIGV2LCBlbCApe1xyXG4gICAgXHJcbiAgICAgICAgICAgIGxldCBpZCA9IDA7XHJcbiAgICAgICAgICAgIGZvciggbGV0IGl0ZW0gb2YgY2Fyb3VzZWwucXVlcnlTZWxlY3RvckFsbChcIi5jYXJvdXNlbC1uYXYgPiB1bCA+IGxpXCIpICl7XHJcbiAgICAgICAgICAgICAgICBpZihlbCA9PSBpdGVtKXtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlkKys7XHJcbiAgICAgICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgICAgICBzY3JvbGxfc3RhcnQgPSBpZDtcclxuICAgIFxyXG4gICAgICAgICAgICBpZihwcmV2aW91c0lkID4gaWQpe1xyXG4gICAgICAgICAgICAgICAgc2Nyb2xsX2VuZCAtPSBwcmV2aW91c0lkIC0gaWQ7XHJcbiAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgc2Nyb2xsX2VuZCArPSAoIGlkIC0gcHJldmlvdXNJZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIFVwZGF0ZSgpO1xyXG4gICAgICAgICAgICBwcmV2aW91c0lkID0gaWQ7XHJcbiAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgZnVuY3Rpb24gVXBkYXRlKCl7XHJcbiAgICAgICAgICAgIGxldCBuID0gMDtcclxuICAgIFxyXG4gICAgICAgICAgICBmb3IoIGxldCBpdGVtIG9mIGl0ZW1zICl7XHJcbiAgICAgICAgICAgICAgICBpZihcclxuICAgICAgICAgICAgICAgICAgICAoc2Nyb2xsX3N0YXJ0ID4gbikgfHxcclxuICAgICAgICAgICAgICAgICAgICAoKHNjcm9sbF9lbmQgLSAxKSA8IG4pXHJcbiAgICAgICAgICAgICAgICApe1xyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW0uY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XHJcbiAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICBpdGVtLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgbisrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICAgICAgbGV0IHJlbW92ZUNsYXNzTmFtZSA9IGNhcm91c2VsLnF1ZXJ5U2VsZWN0b3JBbGwoJy5jYXJvdXNlbC1uYXYtY2lyY2xlLicgKyBjbGFzc05hbWVOYXZJdGVtQWN0aXZlKVswXTtcclxuICAgIFxyXG4gICAgICAgICAgICBpZihyZW1vdmVDbGFzc05hbWUpe1xyXG4gICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3NOYW1lLmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lTmF2SXRlbUFjdGl2ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2Fyb3VzZWwucXVlcnlTZWxlY3RvckFsbCgnLmNhcm91c2VsLW5hdi1jaXJjbGUnKVtzY3JvbGxfc3RhcnRdLmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lTmF2SXRlbUFjdGl2ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgZnVuY3Rpb24gQ3JlYXRlTmF2KCl7XHJcbiAgICBcclxuICAgICAgICAgICAgbGV0IGhpZGRlbkNvdW50ID0gaXRlbXMubGVuZ3RoIC0gc2Nyb2xsX2VuZDtcclxuICAgIFxyXG4gICAgICAgICAgICBsZXQgbmF2SXRlbXMgPSBjYXJvdXNlbC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiY2Fyb3VzZWwtbmF2XCIpWzBdO1xyXG4gICAgXHJcbiAgICAgICAgICAgIGxldCBuYXZJdGVtID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0YWdcIiA6IFwibGlcIixcclxuICAgICAgICAgICAgICAgICAgICBcImF0dHJpYnV0ZVwiIDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcImNsYXNzXCIgOiAnY2Fyb3VzZWwtbmF2LWNpcmNsZSdcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIFwiY29udGVudFwiIDogXCJcIixcclxuICAgICAgICAgICAgICAgICAgICBcImV2ZW50XCIgOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiY2xpY2tcIiA6IGZ1bmN0aW9uKGV2KXsgQ2xpY2tlZChldiwgdGhpcykgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGxldCBkYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgXCJlbFwiIDoge1xyXG4gICAgICAgICAgICAgICAgICAgIFwidGFnXCIgOiBcInVsXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJlbFwiIDogW11cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgIFxyXG4gICAgICAgICAgICBmb3IobGV0IG4gPSAwLCBjb3VudCA9IGhpZGRlbkNvdW50IC8gc2Nyb2xsTjsgbiA8PSBjb3VudDsgbisrKXtcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgZGF0YS5lbC5lbC5wdXNoKCBuYXZJdGVtKCkgKTtcclxuICAgIFxyXG4gICAgICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICAgICAgaWYobmF2SXRlbXMuY2hpbGRyZW4ubGVuZ3RoID4gMCl7XHJcbiAgICAgICAgICAgICAgICBDbGVhckVsZW1lbnQobmF2SXRlbXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICAgICAgSFRNTFJlbmRlcihuYXZJdGVtcywgZGF0YSk7XHJcbiAgICBcclxuICAgICAgICAgICAgVXBkYXRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgZnVuY3Rpb24gTWVkaWEoKXtcclxuICAgICAgICAgICAgc2Nyb2xsX3N0YXJ0ID0gMDtcclxuICAgICAgICAgICAgcHJldmlvdXNJZCA9IHNjcm9sbF9zdGFydDtcclxuICAgICAgICAgICAgc2Nyb2xsX2VuZCA9IH5+KCBjYXJvdXNlbEJvZHkuY2xpZW50V2lkdGggLyBpdGVtSW5mbyApO1xyXG4gICAgXHJcbiAgICAgICAgICAgIENyZWF0ZU5hdigpO1xyXG4gICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgIENyZWF0ZU5hdigpO1xyXG4gICAgXHJcbiAgICAgICAgcmVzaXplLnB1c2goe1xyXG4gICAgICAgICAgICBcImZ1blwiIDogZnVuY3Rpb24oKXsgTWVkaWEoKTsgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGZvcihsZXQgaXRlbSBvZiBpdGVtcyl7XHJcbiAgICAgICAgQ2Fyb3VzZWwoaXRlbSk7XHJcbiAgICB9XHJcblxyXG59KCBBcnJheS5mcm9tKCBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiY2Fyb3VzZWxcIikgKSApICk7XHJcblxyXG4oZnVuY3Rpb24oIG1hcCApe1xyXG4gICAgaWYoICEobWFwIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpICl7IC8qIC4uLiAqLyByZXR1cm4gbnVsbDt9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIE1hcExheWVycygpe1xyXG4gICAgICAgIFx0bGV0IG1hcGJveCA9IGZ1bmN0aW9uKGlkKXtcclxuICAgICAgICBcdFx0cmV0dXJuIEwudGlsZUxheWVyKFwiaHR0cHM6Ly9hcGkudGlsZXMubWFwYm94LmNvbS92NC97aWR9L3t6fS97eH0ve3l9LnBuZz9hY2Nlc3NfdG9rZW49cGsuZXlKMUlqb2liV0Z3WW05NElpd2lZU0k2SW1OcGVqWTROWFZ5Y1RBMmVtWXljWEJuZEhScWNtWjNOM2dpZlEuckpjRklHMjE0QXJpSVNMYkI2QjVhd1wiLCB7XHJcbiAgICAgICAgXHRcdFx0XCJpZFwiIDogaWQsXHJcbiAgICAgICAgXHRcdFx0XCJhdHRyaWJ1dGlvblwiIDogJ01hcCBkYXRhICZjb3B5OyA8YSBocmVmPVwiaHR0cHM6Ly93d3cub3BlbnN0cmVldG1hcC5vcmcvXCI+T3BlblN0cmVldE1hcDwvYT4gY29udHJpYnV0b3JzLCcgK1xyXG4gICAgICAgIFx0XHRcdFx0XHRcdFx0JzxhIGhyZWY9XCJodHRwczovL2NyZWF0aXZlY29tbW9ucy5vcmcvbGljZW5zZXMvYnktc2EvMi4wL1wiPkNDLUJZLVNBPC9hPiwgJyArXHJcbiAgICAgICAgXHRcdFx0XHRcdFx0XHQnSW1hZ2VyeSDCqSA8YSBocmVmPVwiaHR0cHM6Ly93d3cubWFwYm94LmNvbS9cIj5NYXBib3g8L2E+J1xyXG4gICAgICAgIFx0XHR9KTtcclxuICAgICAgICBcdH07XHJcbiAgICAgICAgXHJcbiAgICAgICAgXHRyZXR1cm4ge1xyXG4gICAgICAgIFx0XHRcIm9wZW5zdHJlZXRtYXBcIiA6IEwudGlsZUxheWVyKFxyXG4gICAgICAgIFx0XHRcdFwiaHR0cHM6Ly97c30udGlsZS5vcGVuc3RyZWV0bWFwLm9yZy97en0ve3h9L3t5fS5wbmdcIixcclxuICAgICAgICBcdFx0XHR7XHJcbiAgICAgICAgXHRcdFx0XHRhdHRyaWJ1dGlvbjogJyZjb3B5OyA8YSBocmVmPVwiaHR0cHM6Ly93d3cub3BlbnN0cmVldG1hcC5vcmcvY29weXJpZ2h0XCI+T3BlblN0cmVldE1hcDwvYT4gY29udHJpYnV0b3JzJ1xyXG4gICAgICAgIFx0XHRcdH1cclxuICAgICAgICBcdFx0KSxcclxuICAgICAgICBcdFx0XCJtYXBib3guc3RyZWV0c1wiIDogbWFwYm94KFwibWFwYm94LnN0cmVldHNcIiksXHJcbiAgICAgICAgXHRcdFwibWFwYm94LmxpZ2h0XCIgOiBtYXBib3goXCJtYXBib3gubGlnaHRcIilcclxuICAgICAgICBcdH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGZ1bmN0aW9uIE1hcE1hcmtlcigpe1xyXG4gICAgICAgIFx0cmV0dXJuIFtcclxuICAgICAgICBcdFx0e1xyXG4gICAgICAgIFx0XHRcdFwibGF0TG5nXCIgOiBbIDUwLjUyNTEwMjcsIDMwLjM0ODgwMDMgXSxcclxuICAgICAgICBcdFx0XHRcInRleHRcIiA6IFwiTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVlciBhZGlwaXNjaW5nIGVsaXQuIEFlbmVhbiBjb21tb2RvIGxpZ3VsYSBlZ2V0IGRvbG9yLiBBZW5lYW4gbWFzc2EuXCJcclxuICAgICAgICBcdFx0fVxyXG4gICAgICAgIFx0XVxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBmdW5jdGlvbiBBZGRNYXJrZXIobWFwKXtcclxuICAgICAgICBcdGxldCBtYXJrZXJzID0gTWFwTWFya2VyKCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgXHRmb3IobWFya2VyIG9mIG1hcmtlcnMpe1xyXG4gICAgICAgIFx0XHRMLm1hcmtlcihtYXJrZXIubGF0TG5nKS5hZGRUbyhtYXApXHJcbiAgICAgICAgICAgICAgICBcdC5iaW5kUG9wdXAobWFya2VyLnRleHQpO1xyXG4gICAgICAgIFx0fVxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBmdW5jdGlvbiBMZWFmbGV0KGxhdGxuZyl7XHJcbiAgICAgICAgXHRsZXQgbWFwTGF5ZXJzID0gbmV3IE1hcExheWVycygpO1xyXG4gICAgICAgIFx0bGV0IGRlZmF1bHRNYXAgPSBcIm1hcGJveC5zdHJlZXRzXCI7XHJcbiAgICAgICAgXHJcbiAgICAgICAgXHRsZXQgbWFwID0gTC5tYXAoJ21hcCcsIHtcclxuICAgICAgICBcdFx0Y2VudGVyOiBsYXRsbmcsXHJcbiAgICAgICAgXHRcdHpvb206IDEwLFxyXG4gICAgICAgIFx0XHRsYXllcnM6IG1hcExheWVyc1tkZWZhdWx0TWFwXVxyXG4gICAgICAgIFx0fSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgXHRBZGRNYXJrZXIobWFwKTtcclxuICAgICAgICBcdFxyXG4gICAgICAgIFx0TC5jb250cm9sLmxheWVycyhtYXBMYXllcnMpLmFkZFRvKG1hcCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGZ1bmN0aW9uIENvbnRhY3RzKCl7XHJcbiAgICAgICAgXHRsZXQgbGF0bG5nID0gWzUwLjUyNTEwMjcsIDMwLjM0ODgwMDNdO1xyXG4gICAgICAgICAgICBMZWFmbGV0KGxhdGxuZyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgbGVhZmxldGpzID0gTG9hZEZpbGUoe1xyXG4gICAgICAgICAgICBcInNyY1wiIDogXCJodHRwczovL3VucGtnLmNvbS9sZWFmbGV0QDEuNS4xL2Rpc3QvbGVhZmxldC5qc1wiLFxyXG4gICAgICAgICAgICBcImludGVncml0eVwiIDogXCJzaGE1MTItR2ZmUE1GM1J2TWVZeWMxTFdNSHRLOEViUHYwaU5aOC9vVHRIUHg5L2NjMklMeFErdTkwNXFJd2RwVUxhcURreUJLZ09hQjU3UVRNZzd6dGc4Sm0yT2c9PVwiLFxyXG4gICAgICAgICAgICBcImNyb3Nzb3JpZ2luXCIgOiBcIlwiLFxyXG4gICAgICAgICAgICBcImFzeW5jXCI6IGZhbHNlXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcInNjcmlwdFwiXHJcbiAgICApO1xyXG5cclxuICAgIGxldCBsZWFmbGV0Y3NzID0gTG9hZEZpbGUoe1xyXG4gICAgICAgIFwicmVsXCIgOiBcInN0eWxlc2hlZXRcIixcclxuICAgICAgICBcImhyZWZcIiA6IFwiaHR0cHM6Ly91bnBrZy5jb20vbGVhZmxldEAxLjUuMS9kaXN0L2xlYWZsZXQuY3NzXCIsXHJcbiAgICAgICAgXCJpbnRlZ3JpdHlcIiA6IFwic2hhNTEyLXh3RS9Bejl6cmpCSXBoQWNCYjNGNkpWcXhmNDYrQ0RMd2ZMTUhsb051NktFUUNBV2k2SGNEVWJlT2ZCSXB0Rjd0Y0N6dXNLRmpGdzJ5dXZFcERMOXdRPT1cIixcclxuICAgICAgICBcImNyb3Nzb3JpZ2luXCIgOiBcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImxpbmtcIlxyXG4gICAgKTtcclxuICAgIFxyXG4gICAgbGVhZmxldGpzLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIENvbnRhY3RzKTtcclxuXHJcbiAgICBsZWFmbGV0anMuYWRkRXZlbnRMaXN0ZW5lcihcIm9uZXJyb3IgXCIsIGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgbGVhZmxldGpzID0gTG9hZEZpbGUoe1xyXG4gICAgICAgICAgICAgICAgXCJzcmNcIiA6IFwiLi9hc3NldHMvbGliL2xlYWZsZXRqcy0xLjUuMS9sZWFmbGV0anMuanNcIlxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBcInNjcmlwdFwiXHJcbiAgICAgICAgKTtcclxuICAgICAgICBsZWFmbGV0anMuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgQ29udGFjdHMpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgbGVhZmxldGNzcy5hZGRFdmVudExpc3RlbmVyKFwib25lcnJvciBcIiwgZnVuY3Rpb24oKXtcclxuICAgICAgICBMb2FkRmlsZSh7XHJcbiAgICAgICAgICAgICAgICBcInJlbFwiIDogXCJzdHlsZXNoZWV0XCIsXHJcbiAgICAgICAgICAgICAgICBcImhyZWZcIiA6IFwiLi9hc3NldHMvbGliL2xlYWZsZXRqcy0xLjUuMS9sZWFmbGV0anMuY3NzXCJcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgXCJsaW5rXCJcclxuICAgICAgICApO1xyXG4gICAgfSk7XHJcblxyXG59KCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm1hcFwiKSApKTtcclxuXHJcbmZ1bmN0aW9uIFdpbmRvd1Jlc2l6ZShldil7XHJcbiAgICBmb3IobGV0IGNvbGxiYWNrIG9mIHJlc2l6ZSl7XHJcbiAgICAgICAgY29sbGJhY2suZnVuKCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIFdpbmRvd1Jlc2l6ZSk7Il0sImZpbGUiOiJtYWluLW1pbi5qcyJ9
